Set up

1) create virtual environment and create project
 ** Project initialization
    % django-admin startproject dradha
 ** App initialization
    % python3 manage.py startapp users
    % python3 manage.py startapp personal
 ** Virtual Environment initialization
    % python3 -m venv .venv
    % . .venv/bin/activate
 ** App Dev mode
    % python3 manage.py runserver
 ** Save dependencies
    % pip list   			#Check installed dependencies
    % pip freeze > requirements.txt     #save package information
    % pip install -r requirements.txt   #go through file to install packages
 ** Dependencies
    % pip install djangorestframework
    % pip install pylint pylint-django
    to use: % pylint foldername/filename.py
    % pip install black
    to use: % black foldername/filename.py

1a) Divide the app into multiple parts -> splitting by models

    - Personal productivity 
	- profile 
        - social link
    - Blog
    - Bookmarks
    - Projects
    - Timer


Other notes:

2) initialize psql database using 'createdb' command
 ** Create a new postgresql database
    % createdb users
 ** create new app within project
    % python3 manage.py startapp users
 ** migrate
    % python3 manage.py migrate

 ** add the new app, 'profile' (or whatever app name), into settings.py -> 'INSTALLED_APPS'
    open profile/apps.py to view the class that is generated
            INSTALLED_APPS = [
                'profile.apps.ProfileConfig',
                ...
                ]
 ** makemigration and migrate for <app_name>
    % python3 manage.py makemigrations <app_name>
    % python3 manage.py migrate <app_name>

3) Create Superuser
 ** Creating a superuser that can log in to the admin site
    % python3 manage.py createsuperuser
    >>> Username (leave blank to use 'name'):
    >>> Email address:
    >>> Password:
    >>> Password (again):
    >>> Superuser created successfully.

4) Tests


self.assertEqual(a, b): Asserts that a and b are equal.
self.assertTrue(x): Asserts that x is True.
self.assertFalse(x): Asserts that x is False.
self.assertIn(a, b): Asserts that a is in b.
self.assertNotIn(a, b): Asserts that a is not in b.


5) OAuth 2.0
 ** Install Django OAuth Toolkit: https://django-oauth-toolkit.readthedocs.io/en/latest/getting_started.html#what-we-will-build
    % pip install django-oauth-toolkit
    
https://docs.github.com/en/apps/oauth-apps/building-oauth-apps/authorizing-oauth-apps

3) prepare api endpoint
    # before working on api endpoint for app ('fourbeing'), set up URI endpoint
    #   for the project. backend/backendserver/urls.py

            from django.contrib import admin
            from django.urls import path, include

            urlpatterns = [
                path('admin/', admin.site.urls),
                path('', include('main_app.urls')),
            ]
    # define urls.py for app ('fourbeing')
    #   backend/fourbeing/urls.py
            urlpatterns = [
                path('api/test/', views.test, name='test'),
            ]
    #   backend/fourbeing/views.py
        def test(request):
            pass

Django REST framework
4) prepare serializer, to invoke a serializer to convert db object to json when
    the api endpoint is called
    # 'rest-framework' needs to be installed in .venv, if not done already. (see above for command)
    # add 'rest-framework' to settings.py, INSTALLED_APPS
            INSTALLED_APPS = [
                'rest_framework',
                ... ]

    #in fourbeing/serializers.py
            from rest_framework import serializers

    # if the rest-framework is in the .venv, the 'rest_framework' above may be squiggled.
    # need to notify python of virtual environmant

Django CORS-headers
5) in order to specify the incoming HTTP request and allow the front-end app to access
the uri endpoints of the front end, install Django Cors-headers
https://pypi.org/project/django-cors-headers/
https://github.com/adamchainz/django-cors-headers
    # enter virtual environment
    % . .venv/bin/activate

    # install django-cors-headers
    % pip install django-cors-headers

    # save to requirements.txt
    % pip freeze > requirements.txt

    # update 'settings.py' file:
    INSTALLED_APPS = [
        'corsheaders',
        . . . ]

    MIDDLEWARE = [
        "corsheaders.middleware.CorsMiddleware",
        "django.middleware.common.CommonMiddleware",
        . . . ]

    CORS_ALLOWED_ORIGINS = [
        'https://sub.example.com',
        'http://localhost:5173',
        'http://127.0.0.1:5173',
    ]